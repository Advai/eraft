#ifndef ERAFT_KV_META_H_
#define ERAFT_KV_META_H_

#include <vector>
#include <stdint.h>
#include <cassert>
#include <Kv/utils.h>

namespace kvserver
{
    
const std::vector<uint8_t> kLocalPrefix = { 0x01 };

const std::vector<uint8_t> kRegionRaftPrefix = { 0x02 };

const std::vector<uint8_t> kRegionMetaPrefix = { 0x03 };

const uint8_t kRegionRaftPrefixLen = 11;

const uint8_t kRegionRaftLogLen = 19;

const std::vector<uint8_t> kRaftLogSuffix = { 0x01 };

const std::vector<uint8_t> kRaftStateSuffix = { 0x02 };

const std::vector<uint8_t> kApplyStateSuffix = { 0x03 };

const std::vector<uint8_t> kRegionStateSuffix = { 0x01 };


const std::vector<uint8_t> MinKey = {};

const std::vector<uint8_t> MaxKey = { 255 };

const std::vector<uint8_t> LocalMinKey = { 0x01 };

const std::vector<uint8_t> LocalMaxKey = { 0x02 };

const std::vector<uint8_t> RegionMetaMinKey = { 0x01, 0x03 };

const std::vector<uint8_t> RegionMetaMaxKey = { 0x01, 0x04 };

const std::vector<uint8_t> PrepareBootstrapKey = { 0x01, 0x01 };

const std::vector<uint8_t> StoreIdentKey = { 0x01, 0x02 };

//
// RegionPrefix: kLocalPrefix + kRegionRaftPrefix + regionID + suffix
//
static std::vector<uint8_t> MakeRegionPrefix(uint64_t regionID, std::vector<uint8_t> suffix) 
{
    std::vector<uint8_t> packet;
    packet.insert(packet.begin(), kLocalPrefix.begin(), kLocalPrefix.end());
    packet.insert(packet.end(), kRegionRaftPrefix.begin(), kRegionRaftPrefix.end());
    WriteU64(packet, regionID);
    packet.insert(packet.end(), suffix.begin(), suffix.end());
    return packet;
}

//
// RegionKey: kLocalPrefix + kRegionRaftPrefix + regionID + suffix + subID
//

static std::vector<uint8_t> MakeRegionKey(uint64_t regionID, std::vector<uint8_t> suffix, uint64_t subID)
{
    std::vector<uint8_t> packet;
    packet.insert(packet.begin(), kLocalPrefix.begin(), kLocalPrefix.end());
    packet.insert(packet.end(), kRegionRaftPrefix.begin(), kRegionRaftPrefix.end());
    WriteU64(packet, regionID);
    packet.insert(packet.end(), suffix.begin(), suffix.end());
    WriteU64(packet, subID);
    return packet;
}

//
//  RegionRaftPrefixKey: kLocalPrefix + kRegionRaftPrefix + regionID
//

static std::vector<uint8_t> RegionRaftPrefixKey(uint64_t regionID)
{
    std::vector<uint8_t> packet;
    packet.insert(packet.begin(), kLocalPrefix.begin(), kLocalPrefix.end());
    packet.insert(packet.end(), kRegionRaftPrefix.begin(), kRegionRaftPrefix.end());
    WriteU64(packet, regionID);
    return packet;
}

static std::vector<uint8_t> RaftLogKey(uint64_t regionID, uint64_t index)
{
    return MakeRegionKey(regionID, kRaftLogSuffix, index);
}

static std::vector<uint8_t> RaftStateKey(uint64_t regionID)
{
    return MakeRegionPrefix(regionID, kRaftStateSuffix);
}

static std::vector<uint8_t> ApplyStateKey(uint64_t regionID)
{
    return MakeRegionPrefix(regionID, kApplyStateSuffix);
}

static bool IsRaftStateKey(std::vector<uint8_t> key)
{
    assert(key.size() >= 2);
    return (key.size() == 11 && key[0] == kLocalPrefix[0] && key[1] == kRegionRaftPrefix[0]);
}

static std::pair<uint64_t, std::vector<uint8_t>> DecodeRegionMetaKey(std::vector<uint8_t> key)
{
    if((RegionMetaMinKey.size() + 8 + 1) != (key.size()))
    {
        // TODO: log invalid region meta key length for key
        return std::pair<uint64_t, std::vector<uint8_t>>(0, std::vector<uint8_t>{});
    }
    if( !((key[0] == RegionMetaMinKey[0]) && (key[1] == RegionMetaMinKey[1])) ) {
        // TODO: invalid region meta key prefix for key
        return std::pair<uint64_t, std::vector<uint8_t>>(0, std::vector<uint8_t>{});
    }
    uint64_t regionID = ReadU64(key.begin() + RegionMetaMinKey.size());
}

static std::vector<uint8_t> RegionMetaPrefixKey(uint64_t regionID)
{
    std::vector<uint8_t> packet;
    packet.insert(packet.begin(), kLocalPrefix.begin(), kLocalPrefix.end());
    packet.insert(packet.end(), kRegionMetaPrefix.begin(), kRegionMetaPrefix.end());
    WriteU64(packet, regionID);
    return packet;
}

static std::vector<uint8_t> RegionStateKey(uint64_t regionID)
{
    std::vector<uint8_t> packet;
    packet.insert(packet.begin(), kLocalPrefix.begin(), kLocalPrefix.end());
    packet.insert(packet.end(), kRegionMetaPrefix.begin(), kRegionMetaPrefix.end());
    WriteU64(packet, regionID);
    packet.insert(packet.end(), kRegionStateSuffix.begin(), kRegionStateSuffix.end());
    return packet;
}

/// RaftLogIndex gets the log index from raft log key generated by RaftLogKey.
static uint64_t RaftLogIndex(std::vector<uint8_t> key)
{
    if(key.size() != kRegionRaftLogLen)
    {
        // log key is not a valid raft log key
        return 0;
    }
    return ReadU64(key.begin() + (kRegionRaftLogLen - 8));
}

} // namespace kvserver


#endif